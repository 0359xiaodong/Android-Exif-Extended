apply plugin: 'signing'
apply plugin: 'android-library'

group 'it.sephiroth.android.exif'
version '1.0.1'

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 19
        versionCode 1
        versionName version
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.commons:commons-io:1.3.2'
}


def generatePom() {
    def pom = pom {
        project {
            name 'exif-extended'
            groupId project.group
            artifactId project.name
            version project.version
            description 'Exif extended library for Android, based on jhead library (http://www.sentex.net/~mwandel/jhead/) and on the exif library used in the Android native gallery app'
            inceptionYear '2013'
            url 'http://blog.sephiroth.it'

            licenses {
                license {
                    name 'Public Domain Software'
                    distribution 'repo'
                }
            }

            scm {
                url                 "https://github.com/sephiroth74/Android-Exif-Extended"
                connection          "scm:git:git@github.com:sephiroth74/Android-Exif-Extended.git"
                developerConnection "scm:git:git@github.com:sephiroth74/Android-Exif-Extended.git"
            }


            developers {
                developer {
                    id 'sephiroth74'
                    name 'Alessandro Crugnola'
                    email 'alessandro.crugnola@gmail.com'
                    url 'http://blog.sephiroth.it'
                    roles {
                        role 'author'
                        role 'developer'
                    }
                }
            }
        }
    }
}

uploadArchives {
    if (project.hasProperty('sonatypeUsername')) {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }
                pom = generatePom()

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            }
        }
    }
}

signing {
    sign configurations.archives
}