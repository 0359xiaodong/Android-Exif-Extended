
apply plugin: 'java'

task displayInfo << {
    logger.lifecycle "  project name: ${project.name} (root: ${rootProject.name})"
    logger.lifecycle "  project version: ${project.version}"
    logger.lifecycle "  project group: ${project.group}"
}

project.ext {
    baseName = project.name
    nativeJar = project.name + "-" + project.version + ".jar"
}

// Remove the default jar artifact
configurations.archives.artifacts.each { 
  if (it.archiveTask == jar) { 
    configurations.archives.artifacts.remove(it) 
  } 
}

artifacts {
    archives file("$buildDir/native-libs/" + project.ext.nativeJar)
}

def generatePom() {
    def pom = pom{
        project {
            groupId project.group
            artifactId project.name
            version project.version
            packaging 'jar'
            description 'Exif extended library (native) for Android, based on jhead c library (http://www.sentex.net/~mwandel/jhead/) '
            inceptionYear '2013'
            url 'git@github.com:sephiroth74/Android-Exif-Extended.git'

            licenses {
                license {
                    name 'Public Domain Software'
                    distribution 'repo'
                }
            }

            scm {
                url                 "scm:git:git@github.com:sephiroth74/Android-Exif-Extended.git"
                connection          "scm:git:git@github.com:sephiroth74/Android-Exif-Extended.git"
                developerConnection "scm:git:git@github.com:sephiroth74/Android-Exif-Extended.git"
            }

            developers {
                developer {
                    id 'sephiroth74'
                    name 'Alessandro Crugnola'
                    email 'alessandro.crugnola@gmail.com'
                    url 'http://blog.sephiroth.it'
                    roles {
                        role 'author'
                        role 'developer'
                    }
                }
            }
        }
    }
}

task writePom {
    ext.pomXml = file("pom.xml")
    inputs.file(project.buildFile)
    outputs.file(pomXml)
    doLast {
        generatePom().writeTo(pomXml)
    }
}

task nativeLibsToJar(type: Zip, description: 'create a jar archive of the native libs') {
    destinationDir file("$buildDir/native-libs")
    baseName project.ext.baseName
    extension 'jar'
    from fileTree(dir: 'libs', include: '**/*.so')
    into 'lib/'
}

task ndkBuild(type:Exec) {
    commandLine 'ndk-build', '-j8'
}

task copyNativeLibs(type: Copy) {
    from fileTree(dir: 'libs', include: '**/*.so' )
    into "$buildDir/native-libs"
}

task cleanNativeLibs(type: Delete) {
    delete "$buildDir/native-libs"
    delete "libs"
    delete "obj"
}

tasks.withType(Compile) {
    options.encoding = 'UTF-8'
}

uploadArchives {
    doFirst {
        repositories.mavenDeployer.pom = generatePom()
    }

    repositories.mavenDeployer {
        repository(url: "file://$System.env.HOME/.m2/repository/")
    }
}

clean.dependsOn(cleanNativeLibs)
nativeLibsToJar.dependsOn(copyNativeLibs)
copyNativeLibs.dependsOn(ndkBuild)
build.dependsOn(writePom, nativeLibsToJar)

