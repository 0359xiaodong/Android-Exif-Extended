
apply plugin: 'android-library'

dependencies {
    compile 'com.android.support:support-v4:19.0.+'
    compile project(':android-exif-extended-native')
}

android {
    compileSdkVersion 19
    buildToolsVersion "18.1.1"

    defaultConfig {
        versionCode 1
        versionName version
        minSdkVersion 9
        targetSdkVersion 19
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
}

project.ext {
    outJar = rootProject.name + '-' + version + '.jar'
}


def generatePom() {
    def pom = pom{
        project {
            groupId groupId
            artifactId project.name
            version version
            packaging 'aar'
            description 'Exif extended library (java) for Android, based on jhead c library (http://www.sentex.net/~mwandel/jhead/) '
            inceptionYear '2013'
            url 'git@github.com:sephiroth74/Android-Exif-Extended.git'

            licenses {
                license {
                    name 'Public Domain Software'
                    distribution 'repo'
                }
            }

            scm {
                url                 "scm:git:git@github.com:sephiroth74/Android-Exif-Extended.git"
                connection          "scm:git:git@github.com:sephiroth74/Android-Exif-Extended.git"
                developerConnection "scm:git:git@github.com:sephiroth74/Android-Exif-Extended.git"
            }


            developers {
                developer {
                    id 'sephiroth74'
                    name 'Alessandro Crugnola'
                    email 'alessandro.crugnola@gmail.com'
                    url 'http://blog.sephiroth.it'
                    roles {
                        role 'author'
                        role 'developer'
                    }
                }
            }
        }
    }
}

task clearJar(type: Delete) {
    delete "build/libs/" + project.ext.outJar
}

task makeJar(type: Copy) {
    from('build/bundles/release/')
    into('build/libs/')
    include('classes.jar')
    rename ('classes.jar', project.ext.outJar)
}

task writePom {
    ext.pomXml = file("pom.xml")
    inputs.file(project.buildFile)
    outputs.file(pomXml)
    doLast {
        generatePom().writeTo(pomXml)
    }
}

uploadArchives {
    doFirst {
        repositories.mavenDeployer.pom = generatePom()
    }

    repositories.mavenDeployer {
        repository(url: "file://$System.env.HOME/.m2/repository/")
    }
}


task updateVersion {
    def source = new File("src/it/sephiroth/android/library/media/ExifInterfaceExtended.java")

    onlyIf { task ->
        
        def src = project.file(source)
        def text = src.text

        def pattern = /(?ms)^\s*public static final String VERSION = "($project.version)";$/
        def matcher = ( text =~ pattern )

        if( matcher.size() > 0 ) {
            return false
        }

        return true
    }

    doLast {
        def src = project.file(source)

        println "Version mismatch. updating version to ${project.version}"

        def text = src.text
        def pattern = /(?ms)^(\s*)(public static final String VERSION = ")([0-9\.]+)(";)$/
        def matcher = ( text =~ pattern )

        if( matcher.size() > 0 ) {
            text = matcher.replaceFirst("\$1\$2" + project.version + "\$4")
            src.setText(text)
            println "Updated version of AviaryCds.java to ${project.version}"
        }

    }
}

clean.dependsOn(clearJar)
preBuild.dependsOn(updateVersion)
build.dependsOn(writePom, makeJar)
uploadArchives.dependsOn(build)
