
apply plugin: 'signing'
apply plugin: 'java'

task displayInfo() {
    doLast {
        logger.lifecycle "  project name: ${project.name} (root: ${rootProject.name})"
        logger.lifecycle "  project version: ${project.version}"
        logger.lifecycle "  project group: ${project.group}"
    }
}

project.ext.baseName = project.name
project.ext.nativeJar = project.name + "-" + project.version + ".jar"

// Remove the default jar artifact
configurations.archives.artifacts.each {
    if (it.archiveTask == jar) {
        configurations.archives.artifacts.remove(it)
    }
}

artifacts {
    archives file("$buildDir/native-libs/" + project.ext.nativeJar)
}

def generatePom() {
    def pom = pom{
        project {
            name 'Android-Exif-Extended (native-libs)'
            groupId project.group
            artifactId project.name
            version project.version
            description 'Exif extended library (native) for Android, based on jhead c library (http://www.sentex.net/~mwandel/jhead/) '
            inceptionYear '2013'
            url 'http://blog.sephiroth.it'

            licenses {
                license {
                    name 'Public Domain Software'
                    distribution 'repo'
                }
            }

            scm {
                url                 "https://github.com/sephiroth74/Android-Exif-Extended"
                connection          "scm:git:git@github.com:sephiroth74/Android-Exif-Extended.git"
                developerConnection "scm:git:git@github.com:sephiroth74/Android-Exif-Extended.git"
            }

            developers {
                developer {
                    id 'sephiroth74'
                    name 'Alessandro Crugnola'
                    email 'alessandro.crugnola@gmail.com'
                    url 'http://blog.sephiroth.it'
                    roles {
                        role 'author'
                        role 'developer'
                    }
                }
            }
        }
    }
}

task writePom {
    ext.pomXml = file("pom.xml")
    inputs.file(project.buildFile)
    outputs.file(pomXml)
    doLast {
        generatePom().writeTo(pomXml)
    }
}

// -----------------------------------
// 1. delete libs/*.jar
// -----------------------------------

task deleteJarInLibs(description: 'delete the wrong .jar file in the libs folder') {
    doLast {
        logger.lifecycle "\t(1) Deleting libs/*.* and native-libs/*.*"
        ant.delete (includeEmptyDirs: 'true') {
            fileset(dir: file("$buildDir/libs"), includes: '*.*')
        }

        def dir = new File("$buildDir/native-libs")

        if( dir.exists() ) {
            logger.lifecycle "Deleting $buildDir/native-libs..."
            ant.delete (includeEmptyDirs: 'true') {
                fileset(dir: file("$buildDir/native-libs"), includes: '*.*')
            }
        } else {
            logger.lifecycle 'build/native-libs does not exist'
        }
    }
}

deleteJarInLibs.onlyIf { true }
deleteJarInLibs.outputs.upToDateWhen{ false }

// -----------------------------------
// 2. ndk-build -j8
// -----------------------------------

task ndkBuild(type:Exec) {
    commandLine 'ndk-build', '-j8'

    doFirst {
        logger.lifecycle "\t(2) ndk-build"
    }
}

// -----------------------------------
// 3. copy *.so into build/native-libs
// -----------------------------------
task copyNativeLibs(type:Copy) {
    from fileTree(dir: 'libs', include: '**/*.so' )
    into "$buildDir/native-libs"

    doLast {
        logger.lifecycle "\t(3) Copying libs/*.so into build/native-libs"
    }
}

copyNativeLibs.outputs.upToDateWhen{ false }
copyNativeLibs.onlyIf { true }

// -----------------------------------
// 4. build/native-libs into *.jar
// -----------------------------------

task nativeLibsToJar(type: Zip, description: 'create a jar archive of the native libs') {
    destinationDir file("$buildDir/native-libs")
    baseName project.ext.baseName
    extension 'jar'
    from fileTree(dir: 'libs', include: '**/*.so')
    into 'lib/'

    doLast {
        logger.lifecycle "\t(4) Creating jar from build/native-libs"
    }
}

nativeLibsToJar.outputs.upToDateWhen{ false }
nativeLibsToJar.onlyIf{ true }


// -----------------------------------
// 5. copy build/native-libs/*.jar into builds/libs
// -----------------------------------
task copyGeneratedJarToLibs(type: Copy, description:'Copy the generated jar file in the libs folder') {
    from file("$buildDir/native-libs/${project.ext.nativeJar}")
    into "$buildDir/libs"

    doLast {
        logger.lifecycle "\t(5) Copying build/native-libs/*.jar into build/libs"
    }
}

copyGeneratedJarToLibs.outputs.upToDateWhen{ false }
copyGeneratedJarToLibs.onlyIf{ true }



task cleanNativeLibs(type: Delete) {
    delete "$buildDir/native-libs"
    delete "libs"
    delete "obj"
    doLast {
        logger.lifecycle "\tCleanNativeLibs build/native-libs/*"
    }
}


tasks.withType(Compile) {
    options.encoding = 'UTF-8'
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }
            pom = generatePom()

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword )
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: sonatypeUsername, password: sonatypePassword )
            }
        }
    }
}

clean.dependsOn(cleanNativeLibs)

ndkBuild.dependsOn(deleteJarInLibs)
copyNativeLibs.dependsOn(ndkBuild)
nativeLibsToJar.dependsOn(copyNativeLibs)
copyGeneratedJarToLibs.dependsOn(nativeLibsToJar)

assemble.dependsOn(writePom, jar)

jar {
    doLast {
        deleteJarInLibs.execute()

        ndkBuild.execute()

        copyNativeLibs.execute()

        nativeLibsToJar.execute()

        copyGeneratedJarToLibs.execute()
    }
}

jar.outputs.upToDateWhen{ false }
jar.onlyIf { true }



